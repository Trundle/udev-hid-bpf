# vim: set expandtab shiftwidth=2 tabstop=8 textwidth=0 filetype=yaml:

.templates_sha: &template_sha 9568e38927f9e9c48d4f586f84a071c3a4bdcd39

include:
  - project: 'freedesktop/ci-templates'
    ref: *template_sha
    file:
      - '/templates/fedora.yml'
      - '/templates/ci-fairy.yml'
  - template: Security/SAST.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'

stages:
  - prep             # prep work like rebuilding the container images if there is a change
  - build            # for actually building and testing things in a container
  - test
  - deploy

variables:
  FDO_UPSTREAM_REPO: libevdev/udev-hid-bpf
  FEDORA_VERSION: 39
  FEDORA_RELEASE_VERSION: 37
  FEDORA_PACKAGES: 'cargo clang elfutils-libelf-devel git-core rustfmt systemd-devel xz zlib-devel meson tree jq python3-pip python3-click python3-rich python3-pyudev libevdev systemd-udev'
  FEDORA_TAG:  '2024-04-10.0'
  FDO_DISTRIBUTION_EXEC: 'pip3 install --break-system-packages git+https://gitlab.freedesktop.org/libevdev/hid-tools/'
  RUST_BACKTRACE: '1'
  PREFIX: /_inst
  # Below is for our building of the kernel used in the b2c jobs. A separate tag
  # so we can rebuild that container kernel independently of the rest of the CI pipeline.
  KERNEL_BUILD_CONTAINER_TAG: '2024-04-10.3'
  KERNEL_VERSION: '6.6'
  KERNEL_BUILD_PACKAGES: >
    dwarves
    file
    git-core
    gcc
    gcc-c++
    diffutils
    make
    flex
    bison
    sparse
    bc
    xz
    findutils
    hostname
    elfutils-libelf-devel
    openssl-devel
    perl-Term-ANSIColor
    perl-Encode
    jq

.policy:
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  # cancel run when a newer version is pushed to the branch
  interruptible: true

.fedora:
  variables:
    FDO_DISTRIBUTION_VERSION: $FEDORA_VERSION
    FDO_DISTRIBUTION_PACKAGES: $FEDORA_PACKAGES
    FDO_DISTRIBUTION_TAG: $FEDORA_TAG

#################################################################
#                                                               #
#                          prep stage                           #
#                                                               #
#################################################################

fail-if-fork-is-not-public:
  stage: prep
  script:
    - |
      if [ $CI_PROJECT_VISIBILITY != "public" ]; then
           echo "*************************************************************************************"
           echo "Project visibility must be set to 'public'"
           echo "Change this in $CI_PROJECT_URL/edit under 'Visibility, project features, permissions'"
           echo "*************************************************************************************"
           exit 1
      fi
  except:
    - main@$FDO_UPSTREAM_REPO

#
# Verify that commit messages are as expected, signed-off, etc.
#

check-commit:
  extends:
    - .fdo.ci-fairy
  stage: prep
  script:
    - ci-fairy check-commits --signed-off-by --junit-xml=results.xml
  except:
    - main@$FDO_UPSTREAM_REPO
  variables:
    GIT_DEPTH: 100
  artifacts:
    reports:
      junit: results.xml


python formatting:
  extends: .fdo.ci-fairy
  stage: prep
  script:
    - python3 -m venv _venv
    - . _venv/bin/activate
    - pip3 install ruff
    - ruff format --check .

#
# Build distribution-specific images used by the jobs in the build stage
#

fedora@container-prep:
  extends:
    - .fedora
    - .fdo.container-build@fedora
    - .policy
  stage: prep
  variables:
    GIT_STRATEGY: none


fedora-release@container-prep:
  extends:
    - fedora@container-prep
  variables:
    FDO_DISTRIBUTION_VERSION: $FEDORA_RELEASE_VERSION
    FDO_DISTRIBUTION_EXEC: ''  # we don't need hid-tools here


.kernel_build_variables:
  variables:
    FDO_DISTRIBUTION_VERSION: $FEDORA_VERSION
    FDO_DISTRIBUTION_TAG: $KERNEL_BUILD_CONTAINER_TAG
    FDO_DISTRIBUTION_EXEC: ''  # we don't need hid-tools here
    FDO_REPO_SUFFIX: build-kernel

.b2c_kernel_url:
  before_script: &b2c-kernel-url
    - export KERNEL_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/kernel-$(arch)/v$KERNEL_VERSION/bzImage

# A container just for rebuilding the kernel
# This one is rebuilt too whenever we bump the KERNEL_BUILD_CONTAINER_TAG
kernel build container prep:
  extends:
    - .fdo.container-build@fedora
    - .kernel_build_variables
  stage: prep
  variables:
    GIT_STRATEGY: none
    FDO_DISTRIBUTION_PACKAGES: $KERNEL_BUILD_PACKAGES

#################################################################
#                                                               #
#                       build stage                             #
#                                                               #
#################################################################

# Builds a kernel and upoads it to the project's packages
rebuild kernel:
  extends:
    - .fdo.suffixed-image@fedora
    - .kernel_build_variables
  stage: build
  needs:
    - kernel build container prep
  script:
    - *b2c-kernel-url
    - .gitlab-ci/kernel-build.sh

.cargo-build@template:
  extends:
    - .policy
  stage: build
  script:
    - cargo build
    - cargo test
  dependencies: []

.meson-build@template:
  extends:
    - .policy
  stage: build
  script:
    - .gitlab-ci/meson-build.sh
  variables:
    MESON_BUILDDIR: _build


.fedora-cargo@template:
  extends:
    - .fedora
    - .fdo.distribution-image@fedora
    - .cargo-build@template
  dependencies:
    - fedora@container-prep


.fedora-meson@template:
  extends:
    - .fedora
    - .fdo.distribution-image@fedora
    - .meson-build@template
  dependencies:
    - fedora@container-prep


cargo build and test:
  extends:
    - .fedora-cargo@template


cargo fmt:
  extends:
    - .fedora-cargo@template
  script:
    - cargo fmt --check


meson build and test:
  extends:
    - .fedora-meson@template
  script:
    - .gitlab-ci/meson-build.sh --run-install
    - tree $PREFIX
  variables:
    MESON_ARGS: --prefix=$PREFIX -Dudevdir=$PREFIX/lib/udev
  artifacts:
    paths:
      - $MESON_BUILDDIR
    when: on_success
    expire_in: 1 day


meson filter build:
  extends:
    - .fedora-meson@template
  parallel:
    matrix:
      - FILTER: trace
      - FILTER: XBox
      - FILTER: trace,XBox
  script:
    - export MESON_EXTRA_ARGS="-Dbpf-filter=$FILTER"
    - .gitlab-ci/meson-build.sh --run-install
    - tree $PREFIX
    - |
      if [ "$FILTER" = "trace" ]; then
        # We only expect one file to be installed
        test $(ls $PREFIX/lib/firmware/hid/bpf/ | wc -l) -eq 1
        test -e $PREFIX/lib/firmware/hid/bpf/10-trace_hid_events.bpf.o
      fi
    - |
      if [ "$FILTER" = "Xbox" ]; then
        # We only expect one file to be installed
        test $(ls $PREFIX/lib/firmware/hid/bpf/ | wc -l) -eq 1
        test -e $PREFIX/lib/firmware/hid/bpf/10-Microsoft__XBox-Elite-2.bpf.o
      fi
    - |
      if [ "$FILTER" = "trace,Xbox" ]; then
        # We only expect two files to be installed
        test $(ls $PREFIX/lib/firmware/hid/bpf/ | wc -l) -eq 2
        test -e $PREFIX/lib/firmware/hid/bpf/10-trace_hid_events.bpf.o
        test -e $PREFIX/lib/firmware/hid/bpf/10-Microsoft__XBox-Elite-2.bpf.o
      fi
  variables:
    MESON_ARGS: --prefix=$PREFIX -Dudevdir=$PREFIX/lib/udev

meson features build:
  extends:
    - .fedora-meson@template
  parallel:
    matrix:
      - FEATURE: testing
      - FEATURE: stable
      - FEATURE: testing,stable
  script:
    - export MESON_EXTRA_ARGS="-Dbpfs=$FEATURE"
    - .gitlab-ci/meson-build.sh --run-install
    - tree $PREFIX
    - |
      if [ "$FEATURE" = "testing" ]; then
        test -e $PREFIX/lib/firmware/hid/bpf/10-Microsoft__XBox-Elite-2.bpf.o
      fi
    - |
      if [ "$FILTER" = "testing,stable" ]; then
        test -e $PREFIX/lib/firmware/hid/bpf/10-Microsoft__XBox-Elite-2.bpf.o
      fi
    # no userhacks files should be installed
    - test ! -e $PREFIX/lib/firmware/hid/bpf/10-trace_hid_events.bpf.o
  variables:
    MESON_ARGS: --prefix=$PREFIX -Dudevdir=$PREFIX/lib/udev

#################################################################
#                                                               #
#                        test stage                             #
#                                                               #
#################################################################

sast:
  stage: test

cli install:
  extends:
    - .fedora-meson@template
  dependencies:
    - "meson build and test"
  needs:
    - "meson build and test"
  parallel:
    matrix:
      - INSTPREFIX: $PREFIX
      - INSTPREFIX: /foo
        PREFIXARG: '--prefix=/foo'
  script:
    - cd $MESON_BUILDDIR
    - ./udev-hid-bpf install --install-exe $PREFIXARG src/bpf/testing/10-HP__Elite-Presenter.bpf.o
    - tree $INSTPREFIX
    - test -e $INSTPREFIX/bin/udev-hid-bpf
    - test -e /etc/udev-hid-bpf/10-HP__Elite-Presenter.bpf.o
    - cat /etc/udev/rules.d/99-hid-bpf-10-HP__Elite-Presenter.rules

b2c uhid-test:
  extends:
    - .fedora
    - .policy
    - .fdo.b2c-image@fedora
  tags:
    - kvm
  stage: test
  needs:
    - rebuild kernel
  parallel:
    matrix:
      - TEST: udev
      - TEST: path
  variables:
    MESON_BUILDDIR: build_dir
  script:
    - *b2c-kernel-url
    - export B2C_KERNEL=$KERNEL_URL
    - export B2C_COMMAND=".gitlab-ci/start-in-systemd.sh $TEST"
    - /app/boot2container
  artifacts:
    name: "meson-logs-$CI_JOB_NAME"
    when: always
    expire_in: 1 week
    paths:
      - $MESON_BUILDDIR/meson-logs
    reports:
      junit: $MESON_BUILDDIR/*junit*.xml




#################################################################
#                                                               #
#                       deploy stage                            #
#                                                               #
#################################################################

make release:
  extends:
    - .fedora-cargo@template
  stage: deploy
  script:
    - python3 -m venv _venv
    - . _venv/bin/activate
    - pip install yq
    - ln -s /usr/bin/true /usr/local/bin/udevadm
    - ln -s /usr/bin/true /usr/local/bin/systemd-hwdb
    # this is the default anyway but let's be explicit here
    - ./make_release.sh --verbose --features testing
    - mkdir -p tarball_dir
    - tar xf udev-hid-bpf*.tar.xz -C tarball_dir --strip-components=1
    - pushd tarball_dir
    - ./install.sh --verbose $PREFIX
    - test -e $PREFIX/bin/udev-hid-bpf
    - test -e $PREFIX/lib/udev/rules.d/81-hid-bpf.rules
    - test -e $PREFIX/lib/udev/hwdb.d/81-hid-bpf-testing.hwdb
    - test -e /lib/firmware/hid/bpf/10-HP__Elite-Presenter.bpf.o
    - ./uninstall.sh --verbose $PREFIX
    - test ! -e $PREFIX/bin/udev-hid-bpf
    - test ! -e $PREFIX/lib/udev/rules.d/81-hid-bpf.rules
    - test ! -e $PREFIX/lib/udev/hwdb.d/81-hid-bpf-testing.hwdb
    - test ! -e /lib/firmware/hid/bpf/10-HP__Elite-Presenter.bpf.o
    - popd
  variables:
    FDO_DISTRIBUTION_VERSION: $FEDORA_RELEASE_VERSION
    PREFIX: /usr
    GIT_DEPTH: 0
  artifacts:
    paths:
      - udev-hid-bpf*.tar*
  dependencies:
    - fedora-release@container-prep


pages:
  extends:
    - .fdo.ci-fairy
  stage: deploy
  script:
    - pip3 install sphinx sphinx-rtd-theme myst-parser
    - sphinx-build -b html doc public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
